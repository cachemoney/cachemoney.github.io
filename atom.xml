<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Ruby on Rails, Online Marketing and Analytics]]></title>
  <link href="http://cachemoney.github.io/atom.xml" rel="self"/>
  <link href="http://cachemoney.github.io/"/>
  <updated>2013-07-18T22:31:34-05:00</updated>
  <id>http://cachemoney.github.io/</id>
  <author>
    <name><![CDATA[Robin Paul]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Refactoring User Registration to its Own Service Object]]></title>
    <link href="http://cachemoney.github.io/blog/2013/07/09/refactoring-user-registration-to-its-own-service-object/"/>
    <updated>2013-07-09T21:36:00-05:00</updated>
    <id>http://cachemoney.github.io/blog/2013/07/09/refactoring-user-registration-to-its-own-service-object</id>
    <content type="html"><![CDATA[<p>A quick look at the users_controller.rb shows that the create action is starting to look rather bloated. When I create a user theres several things that need to happen.</p>

<!--more-->


<ul>
<li>Validate User info</li>
<li>Validate Payment action to Stripe</li>
<li>Save the User to the DB</li>
<li>If an invitation token is present, handle following relationships</li>
<li>Send out Welcome emails</li>
<li>Handle errors for each validation check</li>
</ul>


<figure class='code'><figcaption><span>/services/user_registration.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">UserRegistration</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">attr_reader</span> <span class="ss">:error_message</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">user</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@user</span> <span class="o">=</span> <span class="n">user</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">register_user</span><span class="p">(</span><span class="n">stripe_token</span><span class="p">,</span> <span class="n">invitation_token</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="vi">@user</span><span class="o">.</span><span class="n">valid?</span>
</span><span class='line'>      <span class="n">charge</span> <span class="o">=</span> <span class="ss">StripeWrapper</span><span class="p">:</span><span class="ss">:Customer</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="ss">email</span><span class="p">:</span> <span class="vi">@user</span><span class="o">.</span><span class="n">email</span><span class="p">,</span> <span class="ss">card</span><span class="p">:</span> <span class="n">stripe_token</span><span class="p">)</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">charge</span><span class="o">.</span><span class="n">success?</span>
</span><span class='line'>        <span class="vi">@user</span><span class="o">.</span><span class="n">save</span>
</span><span class='line'>        <span class="n">handle_invitation</span><span class="p">(</span><span class="n">invitation_token</span><span class="p">)</span>
</span><span class='line'>        <span class="no">AppMailer</span><span class="o">.</span><span class="n">delay</span><span class="o">.</span><span class="n">welcome_email</span><span class="p">(</span><span class="vi">@user</span><span class="p">)</span>
</span><span class='line'>        <span class="vi">@status</span> <span class="o">=</span> <span class="ss">:success</span>
</span><span class='line'>        <span class="nb">self</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>        <span class="vi">@status</span> <span class="o">=</span> <span class="ss">:failed</span>
</span><span class='line'>        <span class="vi">@error_message</span> <span class="o">=</span> <span class="n">charge</span><span class="o">.</span><span class="n">error_message</span>
</span><span class='line'>        <span class="nb">self</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="vi">@status</span> <span class="o">=</span> <span class="ss">:failed</span>
</span><span class='line'>      <span class="vi">@error_message</span> <span class="o">=</span> <span class="s2">&quot;Invalid user information. Please check the errors below&quot;</span>
</span><span class='line'>      <span class="nb">self</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">successful?</span>
</span><span class='line'>    <span class="vi">@status</span> <span class="o">==</span> <span class="ss">:success</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">handle_invitation</span><span class="p">(</span><span class="n">token</span><span class="p">)</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">token</span><span class="o">.</span><span class="n">present?</span>
</span><span class='line'>        <span class="n">invitation</span> <span class="o">=</span> <span class="no">Invite</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="ss">token</span><span class="p">:</span> <span class="n">token</span><span class="p">)</span><span class="o">.</span><span class="n">first</span>
</span><span class='line'>        <span class="vi">@user</span><span class="o">.</span><span class="n">follow</span><span class="p">(</span><span class="n">invitation</span><span class="o">.</span><span class="n">inviter</span><span class="p">)</span>
</span><span class='line'>        <span class="n">invitation</span><span class="o">.</span><span class="n">inviter</span><span class="o">.</span><span class="n">follow</span><span class="p">(</span><span class="vi">@user</span><span class="p">)</span>
</span><span class='line'>        <span class="n">invitation</span><span class="o">.</span><span class="n">update_column</span><span class="p">(</span><span class="ss">:token</span><span class="p">,</span> <span class="kp">nil</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now the controller is much simpler to debug and test. I have removed the dependency of the AppMailer, handling invitations and charging the customer.</p>

<figure class='code'><figcaption><span>/controllers/users_controller.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">UsersController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">create</span>
</span><span class='line'>    <span class="vi">@user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:user</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">registration</span> <span class="o">=</span> <span class="no">UserRegistration</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="vi">@user</span><span class="p">)</span><span class="o">.</span><span class="n">register_user</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:stripeToken</span><span class="o">]</span><span class="p">,</span><span class="n">params</span><span class="o">[</span><span class="ss">:invite_token</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">registration</span><span class="o">.</span><span class="n">successful?</span>
</span><span class='line'>      <span class="n">session</span><span class="o">[</span><span class="ss">:user_id</span><span class="o">]</span> <span class="o">=</span> <span class="vi">@user</span><span class="o">.</span><span class="n">id</span>
</span><span class='line'>      <span class="n">flash</span><span class="o">[</span><span class="ss">:success</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;You are Signed in and your CC has been charged, an email has been sent to: </span><span class="si">#{</span><span class="vi">@user</span><span class="o">.</span><span class="n">email</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>      <span class="n">redirect_to</span> <span class="n">home_path</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">flash</span><span class="o">[</span><span class="ss">:error</span><span class="o">]</span> <span class="o">=</span> <span class="n">registration</span><span class="o">.</span><span class="n">error_message</span>
</span><span class='line'>      <span class="n">render</span>  <span class="ss">:new</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The question that I have now, is knowing when to abstract logic into a lib or a service object.  This <a href="http://stackoverflow.com/questions/16159021/rails-service-objects-vs-lib-classes">post</a> on stackoverflow provides a good explaination.  It all boils down to how the logic is coupled to your domain models.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Refactoring to Simplify Domain Models]]></title>
    <link href="http://cachemoney.github.io/blog/2013/07/02/refactoring-to-simplify-domain-models/"/>
    <updated>2013-07-02T22:02:00-05:00</updated>
    <id>http://cachemoney.github.io/blog/2013/07/02/refactoring-to-simplify-domain-models</id>
    <content type="html"><![CDATA[<h3>Policy Objects</h3>

<p>Policy Objects can be used to encapsulate a business rule which involves more complex read operations.  For the myFlix app, I can add logic that can group Users into certain roles(or policies) and gran them access to certain features in the app.  For example, those who have paid or those who have signed-up x years ago can be placed in special groups.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">ActiveUserPolicy</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">user</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@user</span> <span class="o">=</span> <span class="n">user</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">premium?</span>
</span><span class='line'>    <span class="vi">@user</span><span class="o">.</span><span class="n">created_at</span> <span class="o">&gt;</span> <span class="mi">2</span><span class="o">.</span><span class="n">years</span><span class="o">.</span><span class="n">ago</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Domain Objects</h3>

<p>Domain Objects are objects for domain models. But sometimes, we don&rsquo;t have models that map to a database table.  Lets say for example, we were storing a credit balance in the user&rsquo;s table. There could be logic in an app that needs to update this balance, but in order to do that you always have to reference the @user to get the balance and the reference the @user again to save the balance.  You can abstract this &ldquo;Credit&rdquo; into its own domain object class, so that it can be used elsewhere and also make it easier to test.  To test Credit domain object a user, you don&rsquo;t have to worry about doing post/get actions to a controller, you can test the model separately.</p>

<h3>Service Objects</h3>

<p>Abstracting code from models or controllers to Service Objects is another way to refactor code in an application. In myFlix, I will refractor the User Signup process into an service object, that handles , charging the customer using my 1) custom Stripe API wrapper, 2) Saving the User to the database, 3) deploy welcome emails and 4) creating friendship creations if an invitation token is present. This can simplify the controller tests, as user registration unit tests can be targeted to the service object now.</p>

<figure class='code'><figcaption><span>/services/user_registration.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">UserRegistration</span>
</span><span class='line'>  <span class="kp">attr_accessor</span> <span class="ss">:user</span>
</span><span class='line'>  <span class="kp">attr_reader</span> <span class="ss">:token</span><span class="p">,</span> <span class="ss">:invite_token</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">user</span><span class="p">,</span> <span class="n">token</span><span class="p">,</span> <span class="n">invite_token</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@token</span> <span class="o">=</span> <span class="n">token</span>
</span><span class='line'>    <span class="vi">@user</span> <span class="o">=</span> <span class="n">user</span>
</span><span class='line'>    <span class="vi">@invite_token</span> <span class="o">=</span> <span class="n">invite_token</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">charge_card</span>
</span><span class='line'>    <span class="ss">StripeWrapper</span><span class="p">:</span><span class="ss">:Charge</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="ss">amount</span><span class="p">:</span> <span class="mi">999</span><span class="p">,</span> <span class="ss">currency</span><span class="p">:</span> <span class="s1">&#39;usd&#39;</span><span class="p">,</span> <span class="ss">card</span><span class="p">:</span> <span class="vi">@token</span><span class="p">,</span> <span class="ss">description</span><span class="p">:</span> <span class="vi">@user</span><span class="o">.</span><span class="n">email</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">register_user</span>
</span><span class='line'>    <span class="vi">@user</span><span class="o">.</span><span class="n">save</span>
</span><span class='line'>    <span class="n">handle_invitation</span> <span class="k">if</span> <span class="vi">@invite_token</span><span class="o">.</span><span class="n">present?</span>
</span><span class='line'>    <span class="no">AppMailer</span><span class="o">.</span><span class="n">delay</span><span class="o">.</span><span class="n">welcome_email</span><span class="p">(</span><span class="vi">@user</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">handle_invitation</span>
</span><span class='line'>      <span class="n">invitation</span> <span class="o">=</span> <span class="no">Invite</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="ss">token</span><span class="p">:</span> <span class="vi">@invite_token</span><span class="p">)</span><span class="o">.</span><span class="n">first</span>
</span><span class='line'>      <span class="vi">@user</span><span class="o">.</span><span class="n">follow</span><span class="p">(</span><span class="n">invitation</span><span class="o">.</span><span class="n">inviter</span><span class="p">)</span>
</span><span class='line'>      <span class="n">invitation</span><span class="o">.</span><span class="n">inviter</span><span class="o">.</span><span class="n">follow</span><span class="p">(</span><span class="vi">@user</span><span class="p">)</span>
</span><span class='line'>      <span class="n">invitation</span><span class="o">.</span><span class="n">update_column</span><span class="p">(</span><span class="ss">:token</span><span class="p">,</span> <span class="kp">nil</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Reference:</p>

<p>1)  <a href="http://blog.codeclimate.com/blog/2012/10/17/7-ways-to-decompose-fat-activerecord-models/">http://blog.codeclimate.com/blog/2012/10/17/7-ways-to-decompose-fat-activerecord-models/</a></p>

<p>2)  <a href="http://blog.steveklabnik.com/posts/2011-09-06-the-secret-to-rails-oo-design">http://blog.steveklabnik.com/posts/2011-09-06-the-secret-to-rails-oo-design</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Show Me the Money with Stripe Payment Processing Integration]]></title>
    <link href="http://cachemoney.github.io/blog/2013/06/24/show-me-the-money-with-stripe-payment-processing-integration/"/>
    <updated>2013-06-24T23:56:00-05:00</updated>
    <id>http://cachemoney.github.io/blog/2013/06/24/show-me-the-money-with-stripe-payment-processing-integration</id>
    <content type="html"><![CDATA[<p>Processing payments, is probably one of the most important functions that any app can have.  Luckily with Stripe, their API is extremely easy to use. In order to be PCI compliant, stripe.js handles sending sensitive fincancial information to Stripe&rsquo;s server from your form.</p>

<p>Once Stripe sends the credit card data to their servers they send back an authorization token.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="ss">Stripe</span><span class="p">:</span><span class="ss">:Token</span><span class="o">.</span><span class="n">create</span><span class="p">(</span>
</span><span class='line'>    <span class="ss">:card</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="ss">:number</span> <span class="o">=&gt;</span> <span class="s2">&quot;4242424242424242&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">:exp_month</span> <span class="o">=&gt;</span> <span class="mi">7</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">:exp_year</span> <span class="o">=&gt;</span> <span class="mi">2014</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">:cvc</span> <span class="o">=&gt;</span> <span class="mi">314</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">token</span> <span class="o">=</span> <span class="n">params</span><span class="o">[</span><span class="ss">:stripeToken</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="k">begin</span>
</span><span class='line'>  <span class="n">charge</span> <span class="o">=</span> <span class="ss">Stripe</span><span class="p">:</span><span class="ss">:Charge</span><span class="o">.</span><span class="n">create</span><span class="p">(</span>
</span><span class='line'>    <span class="ss">:amount</span> <span class="o">=&gt;</span> <span class="mi">1000</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">:currency</span> <span class="o">=&gt;</span> <span class="s2">&quot;usd&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">:card</span> <span class="o">=&gt;</span> <span class="n">token</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">:description</span> <span class="o">=&gt;</span> <span class="s2">&quot;robin@example.com&quot;</span>
</span><span class='line'>  <span class="p">)</span>
</span><span class='line'><span class="k">rescue</span> <span class="ss">Stripe</span><span class="p">:</span><span class="ss">:CardError</span> <span class="o">=&gt;</span> <span class="n">e</span>
</span><span class='line'>  <span class="c1"># The card has been declined</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Lets say we want to write a wrapper around this Stripe&rsquo;s API. You can hardcode values based on business rules. i.e currency: usd, or amount: 999</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">StripeWrapper</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">Charge</span>
</span><span class='line'>    <span class="kp">attr_reader</span> <span class="ss">:response</span><span class="p">,</span> <span class="ss">:status</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">response</span><span class="p">,</span> <span class="n">status</span><span class="p">)</span>
</span><span class='line'>      <span class="vi">@response</span> <span class="o">=</span> <span class="n">response</span>
</span><span class='line'>      <span class="vi">@status</span> <span class="o">=</span> <span class="n">status</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">create</span><span class="p">(</span><span class="n">options</span><span class="o">=</span><span class="p">{})</span>
</span><span class='line'>      <span class="k">begin</span>
</span><span class='line'>        <span class="n">response</span> <span class="o">=</span> <span class="ss">Stripe</span><span class="p">:</span><span class="ss">:Charge</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="ss">amount</span><span class="p">:</span> <span class="n">options</span><span class="o">[</span><span class="ss">:amount</span><span class="o">]</span><span class="p">,</span> <span class="ss">currency</span><span class="p">:</span> <span class="s1">&#39;usd&#39;</span><span class="p">,</span> <span class="ss">card</span><span class="p">:</span> <span class="n">options</span><span class="o">[</span><span class="ss">:card</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>        <span class="kp">new</span><span class="p">(</span> <span class="n">response</span><span class="p">,</span> <span class="ss">:success</span><span class="p">)</span>
</span><span class='line'>      <span class="k">rescue</span> <span class="ss">Stripe</span><span class="p">:</span><span class="ss">:CardError</span> <span class="o">=&gt;</span> <span class="n">e</span>
</span><span class='line'>        <span class="kp">new</span><span class="p">(</span><span class="n">e</span><span class="p">,</span> <span class="ss">:error</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">success?</span>
</span><span class='line'>      <span class="n">status</span> <span class="o">==</span> <span class="ss">:success</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">error_message</span>
</span><span class='line'>      <span class="n">response</span><span class="o">.</span><span class="n">message</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>References:</p>

<p>1) <a href="https://stripe.com/docs">https://stripe.com/docs</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Serving Static Assets with on S3 with CarrierWave]]></title>
    <link href="http://cachemoney.github.io/blog/2013/06/16/serving-static-assets-with-on-s3-with-carrierwave/"/>
    <updated>2013-06-16T23:55:00-05:00</updated>
    <id>http://cachemoney.github.io/blog/2013/06/16/serving-static-assets-with-on-s3-with-carrierwave</id>
    <content type="html"><![CDATA[<p>The next action-packed feature I&rsquo;m adding to myFlix is file upload processing.  With Carrierwave its fairly easy to configure your app to use it.</p>

<!-- more -->


<p>You create an Uploader class where your define your storage directory, and whitelisting file types with:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">extension_white_list</span>
</span><span class='line'>    <span class="sx">%w(jpg jpeg gif png)</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>With this, I can limit movie poster image files to be of that file type.  You then mount an attribute from the uploader class in an ActiveRecord Model.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Video</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">belongs_to</span>  <span class="ss">:category</span>
</span><span class='line'>  <span class="n">has_many</span>  <span class="ss">:reviews</span><span class="p">,</span> <span class="ss">order</span><span class="p">:</span> <span class="s2">&quot;created_at DESC&quot;</span>
</span><span class='line'>  <span class="n">mount_uploader</span> <span class="ss">:large_cover_url</span><span class="p">,</span> <span class="no">LargeCoverUploader</span>
</span><span class='line'>  <span class="n">mount_uploader</span> <span class="ss">:small_cover_url</span><span class="p">,</span> <span class="no">SmallCoverUploader</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>It does have integration with RMagick and MiniMagik, which can help in image processing, I could probably suffice with requiring only one file upload and then resize the image to create a thumbnail.</p>

<p>Carrierwave makes it very easy to integrate with a cloud provider such as AWS and Rackspace. With the Fog gem, a simple configuration option allows you to set your S3 API keys and static assets could be served from an S3 bucket.</p>

<p>References:</p>

<ol>
<li><a href="https://github.com/carrierwaveuploader/carrierwave">https://github.com/carrierwaveuploader/carrierwave</a></li>
<li><a href="https://github.com/fog/fog">https://github.com/fog/fog</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Unicorn on Heroku to Improve Concurrency]]></title>
    <link href="http://cachemoney.github.io/blog/2013/06/15/using-unicorn-on-heroku-to-improve-concurrency/"/>
    <updated>2013-06-15T23:53:00-05:00</updated>
    <id>http://cachemoney.github.io/blog/2013/06/15/using-unicorn-on-heroku-to-improve-concurrency</id>
    <content type="html"><![CDATA[<p>The default configuration in Heroku uses Webrick(?) as the default webserver.  They recommend that you use Unicorn, which is a Rack HTTP server that can run multiple ruby processes in a single dyno.</p>

<p>You can control how many of these ruby processes that unicorn will use with <code>worker_processes Integer(ENV["WEB_CONCURRENCY"] || 3)</code> in your Procfile.</p>

<p>Now that I have redis being used to process workers, I could use Foreman to start all my services to mimic a production environment.  <code>foreman start</code> will read a Procfile in the Rails root directory and start up (web)workers on port 5000.</p>

<p>References:
1. <a href="https://devcenter.heroku.com/articles/rails-unicorn">https://devcenter.heroku.com/articles/rails-unicorn</a>
2. <a href="https://github.com/blog/517-unicorn">https://github.com/blog/517-unicorn</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Background Jobs with Sidekiq and Redis]]></title>
    <link href="http://cachemoney.github.io/blog/2013/06/13/background-jobs-with-sidekiq-and-redis/"/>
    <updated>2013-06-13T23:53:00-05:00</updated>
    <id>http://cachemoney.github.io/blog/2013/06/13/background-jobs-with-sidekiq-and-redis</id>
    <content type="html"><![CDATA[<p>One thing I noticed is after completing the new user registration form or the Invite a Friend form, there would be a time where the application just sits there(usually less than 2 seconds) before it redirects to the success view.  This is happening because
ActionMailer is dispatching an email to the Mail Deliveries queue, and in my development environment, connecting to GMail.</p>

<!-- more -->


<p>Here is where a background scheduler can handle that process allowing the application to be ready for the user instantly.  I&rsquo;ll be using Sidekiq to handle the scheduling.  Sidekiq uses another database server, Redis, to store these jobs.  I will use the delayed extension of sidekiq to make the apps mailing features to behave asynchrously.</p>

<p>I&rsquo;m excited to use redis, as its always being mentioned on HackerNews and developers are coming up with new applications with it.  Installing and using redis on Heroku is easy as well. There is an 1-click addon called, RedisToGo.</p>

<p>Reference Material:</p>

<ol>
<li><a href="https://www.pushlayer.com/blog/2013/03/11/how-we-use-sidekiq-and-redis-for-massively-concurrent-workers">https://www.pushlayer.com/blog/2013/03/11/how-we-use-sidekiq-and-redis-for-massively-concurrent-workers</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Simplifying Models with Concerns]]></title>
    <link href="http://cachemoney.github.io/blog/2013/06/06/simplifying-models-with-concerns/"/>
    <updated>2013-06-06T23:50:00-05:00</updated>
    <id>http://cachemoney.github.io/blog/2013/06/06/simplifying-models-with-concerns</id>
    <content type="html"><![CDATA[<p>In the effort for simplifying the complexity of models, we can abstract methods in from a model that can be shared across all other models.  In the foreseeable future, its makes sense to remove the token logic out of the invites module, and put it into an ActiveSupport::Concern</p>

<!--more-->


<p>We can easily add a &ldquo;Tokennable&rdquo; attribute to any module now. Users, reviews, can be easily tokenized. First we can put our token logic in a concern:</p>

<figure class='code'><figcaption><span>tokenable.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Tokenable</span>
</span><span class='line'>  <span class="kp">extend</span> <span class="ss">ActiveSupport</span><span class="p">:</span><span class="ss">:Concern</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">included</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">before_create</span> <span class="ss">:generate_token</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">generate_token</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">token</span> <span class="o">=</span> <span class="no">SecureRandom</span><span class="o">.</span><span class="n">urlsafe_base64</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>We have make sure that the lib directory is loaded when rails starts up:
config.autoload_paths &lt;&lt; &ldquo;#{Rails.root}/lib&rdquo;</p>

<p>If I put <code>include Tokenable</code> into a model, then I have effectively given that model the ability to generate a token upon the creation of it.</p>

<p>Reference: <a href="https://37signals.com/svn/posts/3372-put-chubby-models-on-a-diet-with-concerns">https://37signals.com/svn/posts/3372-put-chubby-models-on-a-diet-with-concerns</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tokens to Anonymize Your Data]]></title>
    <link href="http://cachemoney.github.io/blog/2013/06/02/tokens-to-anonymize-your-data/"/>
    <updated>2013-06-02T23:49:00-05:00</updated>
    <id>http://cachemoney.github.io/blog/2013/06/02/tokens-to-anonymize-your-data</id>
    <content type="html"><![CDATA[<p>The next feature in our app is being able to invite a friend using ActionMailer with a tracking link, so if they signup via that link, each of you will become friends, oh and do it the TDD way, including feature specs.</p>

<!--more -->


<p>This involves creating an invitation&rsquo;s table to store the user_id, invitee&rsquo;s email address and full name,(this way, I can pre-populate the registration form making it easier to sign-up), and a tracking token.
In the Invite model, I create the token</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">InvitesController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>  <span class="n">before_filter</span> <span class="ss">:require_user</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">create</span>
</span><span class='line'>    <span class="vi">@invite</span> <span class="o">=</span> <span class="no">Invite</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">inviter</span><span class="p">:</span> <span class="n">current_user</span><span class="p">,</span>
</span><span class='line'>                        <span class="n">invitee_email</span><span class="p">:</span> <span class="n">params</span><span class="o">[</span><span class="ss">:invites</span><span class="o">][</span><span class="ss">:invitee_email</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>                        <span class="n">full_name</span><span class="p">:</span> <span class="n">params</span><span class="o">[</span><span class="ss">:invites</span><span class="o">][</span><span class="ss">:full_name</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@invite_message</span> <span class="o">=</span> <span class="n">params</span><span class="o">[</span><span class="ss">:invites</span><span class="o">][</span><span class="ss">:message</span><span class="o">]</span>
</span><span class='line'>    <span class="k">if</span> <span class="vi">@invite</span><span class="o">.</span><span class="n">save</span>
</span><span class='line'>      <span class="no">AppMailer</span><span class="o">.</span><span class="n">invite_email</span><span class="p">(</span><span class="vi">@invite</span><span class="p">,</span> <span class="vi">@invite_message</span><span class="p">)</span>
</span><span class='line'>      <span class="n">flash</span><span class="o">[</span><span class="ss">:success</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;You have notified </span><span class="si">#{</span><span class="vi">@invite</span><span class="o">.</span><span class="n">full_name</span><span class="si">}</span><span class="s2"> to join MyFlix&quot;</span>
</span><span class='line'>      <span class="n">redirect_to</span> <span class="n">new_invite_path</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">render</span>  <span class="ss">:new</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>In the mailer, i build out the custom link with the invite token. Using a custom route:
get &lsquo;register/:token&rsquo;, to: &ldquo;users#new_with_invitation_token&rdquo;, as: &lsquo;register_with_token&rsquo; I can process the user registration in its own controller action.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def new_with_invitation_token
</span><span class='line'>    invitation = Invite.where(token: params[:token]).first
</span><span class='line'>    if invitation
</span><span class='line'>      @user = User.new(email: invitation.invitee_email)
</span><span class='line'>      @invite_token = invitation.token
</span><span class='line'>      render :new
</span><span class='line'>    else
</span><span class='line'>      redirect_to invalid_token_path
</span><span class='line'>    end
</span><span class='line'>  end</span></code></pre></td></tr></table></div></figure>


<p>  With this private method, upon registration, I create the friend relationships with each other.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def handle_invitation
</span><span class='line'>  if params[:invite_token].present?
</span><span class='line'>    invitation = Invite.where(token: params[:invite_token]).first
</span><span class='line'>    @user.follow(invitation.inviter)
</span><span class='line'>    invitation.inviter.follow(@user)
</span><span class='line'>    invitation.update_column(:token, nil)
</span><span class='line'>  end       
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>Feature tests to test friendships and emails being sent out.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>feature "User invites friend to join" do
</span><span class='line'>  scenario "invites friend to create an account" do
</span><span class='line'>
</span><span class='line'>    alice = Fabricate(:user)
</span><span class='line'>    bob = Fabricate.attributes_for(:user)
</span><span class='line'>    sign_in(alice)
</span><span class='line'>    clear_emails
</span><span class='line'>    visit new_invite_path
</span><span class='line'>    fill_in  "invites[full_name]", with: bob[:full_name]
</span><span class='line'>    fill_in "invites[invitee_email]", with: bob[:email]
</span><span class='line'>    click_button "Send Invitation"
</span><span class='line'>    open_email(bob[:email])
</span><span class='line'>    current_email.body.should have_content("Please, join this really cool site")
</span><span class='line'>    current_email.click_link 'Register'
</span><span class='line'>    find_field('user[email]').value.should eq bob[:email]
</span><span class='line'>    fill_in "user[password]", with: bob[:password]
</span><span class='line'>    fill_in "user_full_name", with: bob[:full_name]
</span><span class='line'>    click_button "Sign Up"
</span><span class='line'>    page.should have_content("You are Signed in and email sent")
</span><span class='line'>    # Check Friendships for inviter
</span><span class='line'>    visit people_path
</span><span class='line'>    page.should have_link(alice.full_name)
</span><span class='line'>    # Check Friendship for invitee
</span><span class='line'>    visit sign_out_path
</span><span class='line'>    sign_in(alice)
</span><span class='line'>    visit people_path
</span><span class='line'>    page.should have_link(bob[:full_name])
</span><span class='line'>  end
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ActionMailer in Rails: Communicating with Users]]></title>
    <link href="http://cachemoney.github.io/blog/2013/06/01/actionmailer-in-rail-communicating-with-users/"/>
    <updated>2013-06-01T23:49:00-05:00</updated>
    <id>http://cachemoney.github.io/blog/2013/06/01/actionmailer-in-rail-communicating-with-users</id>
    <content type="html"><![CDATA[<p>After doing email marketing for several years, and building a building out a strategy for revenue from scratch, learning ActionMailer was really exciting.</p>

<!-- more -->


<p>I was very surprised on how easy it is to implement and testing is just as easy with</p>

<p>You setup your Mailer routines in app\mailers</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">AppMailer</span> <span class="o">&lt;</span> <span class="ss">ActionMailer</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">welcome_email</span><span class="p">(</span><span class="n">user</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@user</span> <span class="o">=</span> <span class="n">user</span>
</span><span class='line'>    <span class="vi">@url</span> <span class="o">=</span> <span class="s1">&#39;http://localhost:3000/sign_in&#39;</span>
</span><span class='line'>    <span class="n">email_with_name</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="vi">@user</span><span class="o">.</span><span class="n">full_name</span><span class="si">}</span><span class="s2"> &lt;</span><span class="si">#{</span><span class="vi">@user</span><span class="o">.</span><span class="n">email</span><span class="si">}</span><span class="s2">&gt;&quot;</span>
</span><span class='line'>    <span class="n">mail</span><span class="p">(</span><span class="ss">to</span><span class="p">:</span> <span class="vi">@user</span><span class="o">.</span><span class="n">email</span><span class="p">,</span> <span class="ss">from</span><span class="p">:</span> <span class="s1">&#39;info@myflix.com&#39;</span> <span class="p">,</span> <span class="ss">subject</span><span class="p">:</span> <span class="s2">&quot;Welcome to My Awesome Site&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">password_reset</span><span class="p">(</span><span class="n">user</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@user</span> <span class="o">=</span> <span class="n">user</span>
</span><span class='line'>    <span class="n">mail</span> <span class="ss">:to</span> <span class="o">=&gt;</span> <span class="vi">@user</span><span class="o">.</span><span class="n">email</span><span class="p">,</span> <span class="ss">:subject</span> <span class="o">=&gt;</span> <span class="s2">&quot;Password Reset&quot;</span><span class="p">,</span> <span class="ss">from</span><span class="p">:</span> <span class="s2">&quot;info@myflix.com&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Create your message in your views template</p>

<figure class='code'><figcaption><span>views / app_mailer / welcome_email.html.erb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;!</span><span class="no">DOCTYPE</span> <span class="n">html</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">html</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">head</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">meta</span> <span class="n">content</span><span class="o">=</span><span class="s2">&quot;text/html; charset=UTF-8&quot;</span> <span class="n">http</span><span class="o">-</span><span class="n">equiv</span><span class="o">=</span><span class="s2">&quot;Content-Type&quot;</span> <span class="sr">/&gt;</span>
</span><span class='line'><span class="sr">  &lt;/</span><span class="n">head</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">body</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="no">Welcome</span> <span class="n">to</span> <span class="n">example</span><span class="o">.</span><span class="n">com</span><span class="p">,</span> <span class="o">&lt;</span><span class="sx">%= @user.full_name %&gt;&lt;/h1&gt;</span>
</span><span class='line'><span class="sx">    &lt;p&gt;</span>
</span><span class='line'><span class="sx">      You have successfully signed up to example.com,</span>
</span><span class='line'><span class="sx">      your username is: &lt;%=</span> <span class="vi">@user</span><span class="o">.</span><span class="n">email</span> <span class="sx">%&gt;.&lt;br/&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'><span class="sr">    &lt;p&gt;</span>
</span><span class='line'><span class="sr">      To login to the site, just follow this link: &lt;%= @url %&gt;.</span>
</span><span class='line'><span class="sr">    &lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="no">Thanks</span> <span class="k">for</span> <span class="n">joining</span> <span class="ow">and</span> <span class="n">have</span> <span class="n">a</span> <span class="n">great</span> <span class="n">day!</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'><span class="sr">  &lt;/</span><span class="n">body</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Testing is pretty straight forward, the only thing is to do is clear ActionMailer deliveries queue after each test.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">describe</span> <span class="s2">&quot;POST create&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">context</span> <span class="s2">&quot;email sending&quot;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">let!</span><span class="p">(</span><span class="ss">:alice</span><span class="p">)</span>  <span class="p">{</span><span class="no">Fabricate</span><span class="o">.</span><span class="n">attributes_for</span><span class="p">(</span><span class="ss">:user</span><span class="p">)}</span>
</span><span class='line'>      <span class="n">before</span> <span class="p">{</span><span class="n">post</span> <span class="ss">:create</span><span class="p">,</span> <span class="ss">user</span><span class="p">:</span> <span class="n">alice</span><span class="p">}</span>
</span><span class='line'>      <span class="n">after</span> <span class="p">{</span> <span class="ss">ActionMailer</span><span class="p">:</span><span class="ss">:Base</span><span class="o">.</span><span class="n">deliveries</span><span class="o">.</span><span class="n">clear</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">it</span> <span class="s2">&quot;sends out the email&quot;</span> <span class="k">do</span>
</span><span class='line'>        <span class="ss">ActionMailer</span><span class="p">:</span><span class="ss">:Base</span><span class="o">.</span><span class="n">deliveries</span><span class="o">.</span><span class="n">should_not</span> <span class="n">be_empty</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>      <span class="n">it</span> <span class="s2">&quot;sends to the right receipient&quot;</span> <span class="k">do</span>
</span><span class='line'>        <span class="n">message</span> <span class="o">=</span> <span class="ss">ActionMailer</span><span class="p">:</span><span class="ss">:Base</span><span class="o">.</span><span class="n">deliveries</span><span class="o">.</span><span class="n">last</span>
</span><span class='line'>        <span class="n">message</span><span class="o">.</span><span class="n">to</span><span class="o">.</span><span class="n">should</span> <span class="o">==</span> <span class="o">[</span><span class="n">alice</span><span class="o">[</span><span class="s2">&quot;email&quot;</span><span class="o">]]</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>      <span class="n">it</span> <span class="s2">&quot;has the right content&quot;</span> <span class="k">do</span>
</span><span class='line'>        <span class="n">message</span> <span class="o">=</span> <span class="ss">ActionMailer</span><span class="p">:</span><span class="ss">:Base</span><span class="o">.</span><span class="n">deliveries</span><span class="o">.</span><span class="n">last</span>
</span><span class='line'>        <span class="n">message</span><span class="o">.</span><span class="n">body</span><span class="o">.</span><span class="n">should</span> <span class="kp">include</span><span class="p">(</span><span class="s1">&#39;You have successfully signed up to example.com&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>In development, I set up a spare gmail account to send out email notifications and on production, I am using Mailgun, where you can send 200/emails/day for free.  To keep my api keys private, I followed the example outlined by Daniel on using a <a href="http://railsapps.github.io/rails-environment-variables.html">local_congig.yml</a>. Just remember to add it to your <code>.gitignore</code> file so it&rsquo;s not checked into your repo.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creating Friendships with Self Referential Associations]]></title>
    <link href="http://cachemoney.github.io/blog/2013/05/31/friendships-with-self-referential-associations/"/>
    <updated>2013-05-31T23:47:00-05:00</updated>
    <id>http://cachemoney.github.io/blog/2013/05/31/friendships-with-self-referential-associations</id>
    <content type="html"><![CDATA[<p>Now, we&rsquo;re allowing users of myFlix to create &lsquo;friendships&rsquo; by following other users.  Self joins will allow us to do this with out the need to create extraneous tables.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">validates_presence_of</span> <span class="ss">:email</span><span class="p">,</span> <span class="ss">:password</span><span class="p">,</span> <span class="ss">:full_name</span>
</span><span class='line'>  <span class="n">validates_uniqueness_of</span> <span class="ss">:email</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">has_secure_password</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:following_relationships</span><span class="p">,</span> <span class="n">class_name</span><span class="p">:</span> <span class="s2">&quot;Relationship&quot;</span><span class="p">,</span> <span class="n">foreign_key</span><span class="p">:</span> <span class="ss">:follower_id</span>
</span><span class='line'>  <span class="n">has_many</span>  <span class="ss">:leading_relationships</span><span class="p">,</span> <span class="n">class_name</span><span class="p">:</span> <span class="s2">&quot;Relationship&quot;</span><span class="p">,</span> <span class="n">foreign_key</span><span class="p">:</span> <span class="ss">:leader_id</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Relationship</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="c1">#join table to associate friends to a user</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:follower</span><span class="p">,</span> <span class="n">class_name</span><span class="p">:</span> <span class="s2">&quot;User&quot;</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:leader</span><span class="p">,</span> <span class="n">class_name</span><span class="p">:</span> <span class="s2">&quot;User&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can access a users followers with <code>@user.following_relationships</code> or they are following with <code>@user.leading_relationships</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[3 Styles of BDD with Rails]]></title>
    <link href="http://cachemoney.github.io/blog/2013/05/29/3-styles-of-bdd-with-rails/"/>
    <updated>2013-05-29T23:43:00-05:00</updated>
    <id>http://cachemoney.github.io/blog/2013/05/29/3-styles-of-bdd-with-rails</id>
    <content type="html"><![CDATA[<p>So far, we&rsquo;ve been writing feature tests with capybara to test a particular business process which touches multiple controllers, models and views.  There are certain styles of approaching Behavioral Driven Design, a) Outside &ndash; In (ABDD), b) Inside &ndash; Out, and c) Meet in the Middle.</p>

<!-- more -->


<p>The approach that we&rsquo;re following is Meet in the middle.  With this flavor, we start with html mockups and then we start replacing placeholder data with logic.  Controller tests will then verify our view/controller interactions, followed by model tests and then finally the feature/integration specs will test out the workflow.</p>

<p>Its interesting to hear about the Outside-In approach, or Acceptance BDD, as your start with the integration tests, then controller tests, followed by model tests.  When I started reading about Rails development over a year ago and doing numerous tutorials on the web, I would always run across blog posts about Cucumber testing, and it seemed everyone out there had an opinion on it. &ldquo;Is Cucumber and BDD the Holy Grail&rdquo; or &ldquo;Who wants to write a parser to parse your Cucumber specs?&rdquo;  This seems to be one of the biggest hurdles with this approach to BDD. Theres a big learning curve in this as you have to write an integration test right off the bat.</p>

<p>The last approach to BDD, Inside-Out, seems to be the easiest to implement as your start writing model tests right away.  But the one thing you have to watch out, is that when you start moving on to your controller tests, you could have easily made some wrong assumptions about how a model behaves and then have to revisit the code afterwards.  This can cascade up as you approach your feature tests and then coming back to re-working your models.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Writing Feature Specs with Capybara]]></title>
    <link href="http://cachemoney.github.io/blog/2013/05/27/writing-feature-specs-with-capybara/"/>
    <updated>2013-05-27T20:30:00-05:00</updated>
    <id>http://cachemoney.github.io/blog/2013/05/27/writing-feature-specs-with-capybara</id>
    <content type="html"><![CDATA[<h3>Testing an app, like how a real user would use it.</h3>

<p>It&rsquo;s interesting that even though the terminology changes slightly, Feature and Scenario, its analagous to &ldquo;Describe&rdquo; and &ldquo;It&rdquo; in our rspec unit tests.  Capybara also introduces an easy to understand syntax like &ldquo;click_link, fill_in and visit&rdquo; to issue real life user actions.</p>

<!-- more -->


<p>After installing the capybara gem and adding <code>require 'capybara/rspec'</code> to spec_helper.rb</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">feature</span> <span class="s1">&#39;user signs in&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">background</span> <span class="k">do</span>
</span><span class='line'>    <span class="no">User</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="n">full_name</span><span class="p">:</span> <span class="s2">&quot;Jon Doe&quot;</span><span class="p">,</span> <span class="ss">email</span><span class="p">:</span> <span class="s2">&quot;jon@example.com&quot;</span><span class="p">,</span> <span class="ss">password</span><span class="p">:</span> <span class="s2">&quot;password&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">scenario</span> <span class="s1">&#39;with existing username&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">visit</span> <span class="n">sign_in_path</span>
</span><span class='line'>    <span class="n">fill_in</span> <span class="s2">&quot;email&quot;</span><span class="p">,</span> <span class="ss">with</span><span class="p">:</span> <span class="s2">&quot;jon@example.com&quot;</span>
</span><span class='line'>    <span class="n">fill_in</span> <span class="s2">&quot;password&quot;</span><span class="p">,</span> <span class="ss">with</span><span class="p">:</span> <span class="s2">&quot;password&quot;</span>
</span><span class='line'>    <span class="n">click_button</span>  <span class="s2">&quot;Sign in&quot;</span>
</span><span class='line'>    <span class="n">page</span><span class="o">.</span><span class="n">should</span> <span class="n">have_content</span> <span class="s2">&quot;Welcome, Jon Doe&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">scenario</span> <span class="s1">&#39;with non-existant username&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">visit</span> <span class="n">sign_in_path</span>
</span><span class='line'>    <span class="n">fill_in</span> <span class="s2">&quot;email&quot;</span><span class="p">,</span> <span class="ss">with</span><span class="p">:</span> <span class="s2">&quot;jon_jones@example.com&quot;</span>
</span><span class='line'>    <span class="n">fill_in</span> <span class="s2">&quot;password&quot;</span><span class="p">,</span> <span class="ss">with</span><span class="p">:</span> <span class="s2">&quot;password&quot;</span>
</span><span class='line'>    <span class="n">click_button</span>  <span class="s2">&quot;Sign in&quot;</span>
</span><span class='line'>    <span class="n">page</span><span class="o">.</span><span class="n">should</span> <span class="n">have_content</span> <span class="s2">&quot;Invalid Email or Password&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Shared Examples equals Shared Bliss]]></title>
    <link href="http://cachemoney.github.io/blog/2013/05/24/shared-examples-equals-shared-bliss/"/>
    <updated>2013-05-24T20:16:00-05:00</updated>
    <id>http://cachemoney.github.io/blog/2013/05/24/shared-examples-equals-shared-bliss</id>
    <content type="html"><![CDATA[<p>Another examle of DRY&#8217;ing up our controller specs is using shared_examples.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">shared_examples</span> <span class="s2">&quot;require_sign_in&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">it</span> <span class="s2">&quot;redirects to the sign_in_path&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">clear_current_user</span>
</span><span class='line'>    <span class="n">action</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="n">response</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">redirect_to</span> <span class="n">sign_in_path</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>It is basically another way to wrap test code and allows you to call it via:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">describe</span> <span class="s2">&quot;Invite Friends&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">it_behaves_like</span> <span class="s2">&quot;require_sign_in&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Macros in Rspec]]></title>
    <link href="http://cachemoney.github.io/blog/2013/05/20/using-macros-in-rspec/"/>
    <updated>2013-05-20T20:06:00-05:00</updated>
    <id>http://cachemoney.github.io/blog/2013/05/20/using-macros-in-rspec</id>
    <content type="html"><![CDATA[<p>A much welcomed lesson in writing macros to simplify all our testing was much appreciative.  A lot of our feature tests include authenticating users.  These macros can be used across all controller tests, whenver a require_user is a business requirement.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">set_current_user</span><span class="p">(</span><span class="n">user</span><span class="o">=</span><span class="kp">nil</span><span class="p">)</span>
</span><span class='line'>  <span class="n">session</span><span class="o">[</span><span class="ss">:user_id</span><span class="o">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">user</span> <span class="o">||</span> <span class="no">Fabricate</span><span class="p">(</span><span class="ss">:user</span><span class="p">)</span><span class="o">.</span><span class="n">id</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">set_current_admin</span><span class="p">(</span><span class="n">admin</span><span class="o">=</span><span class="kp">nil</span><span class="p">)</span>
</span><span class='line'>  <span class="n">session</span><span class="o">[</span><span class="ss">:user_id</span><span class="o">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">admin</span> <span class="o">||</span> <span class="no">Fabricate</span><span class="p">(</span><span class="ss">:admin</span><span class="p">)</span><span class="o">.</span><span class="n">id</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">current_user</span>
</span><span class='line'>  <span class="no">User</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">session</span><span class="o">[</span><span class="ss">:user_id</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">clear_current_user</span>
</span><span class='line'>  <span class="n">session</span><span class="o">[</span><span class="ss">:user_id</span><span class="o">]</span> <span class="o">=</span> <span class="kp">nil</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">sign_in</span><span class="p">(</span><span class="n">a_user</span><span class="o">=</span><span class="kp">nil</span><span class="p">)</span>
</span><span class='line'>  <span class="n">user</span> <span class="o">=</span> <span class="n">a_user</span> <span class="o">||</span> <span class="no">Fabricate</span><span class="p">(</span><span class="ss">:user</span><span class="p">)</span>
</span><span class='line'>  <span class="n">visit</span> <span class="n">sign_in_path</span>
</span><span class='line'>  <span class="n">fill_in</span> <span class="s2">&quot;email&quot;</span><span class="p">,</span> <span class="ss">with</span><span class="p">:</span> <span class="n">user</span><span class="o">.</span><span class="n">email</span>
</span><span class='line'>  <span class="n">fill_in</span> <span class="s2">&quot;password&quot;</span><span class="p">,</span> <span class="ss">with</span><span class="p">:</span> <span class="n">user</span><span class="o">.</span><span class="n">password</span>
</span><span class='line'>  <span class="n">click_button</span>  <span class="s2">&quot;Sign in&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Basics in Testing Controllers]]></title>
    <link href="http://cachemoney.github.io/blog/2013/05/17/basics-in-testing-controllers/"/>
    <updated>2013-05-17T18:07:00-05:00</updated>
    <id>http://cachemoney.github.io/blog/2013/05/17/basics-in-testing-controllers</id>
    <content type="html"><![CDATA[<p>One principle that I&rsquo;ve been reading on Rails development, is keeping your controllers &lsquo;skinny&rsquo; and the models &ldquo;fat&rdquo;.  It feels like perhaps, you can be a little &lsquo;lax on testing controllers.  I quickly found out that controllers can be complex as they can access various models, do some processing and then send that info into the view. They are also coupled to your routes, so theres another thing to consider. <!-- more --></p>

<p>Controller specs consist of using an HTTP method (post, get, put &hellip; etc) and some test data to pass into the HTTP verb.  For this project, I&rsquo;ve used the <a href="http://www.fabricationgem.org/">Fabricator</a> gem, which makes creating test objects easy peasy.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">alice</span> <span class="o">=</span> <span class="no">Fabricator</span><span class="p">(</span><span class="ss">:user</span><span class="p">)</span>
</span><span class='line'><span class="n">monk</span> <span class="o">=</span> <span class="no">Fabricator</span><span class="o">.</span><span class="n">attributes_for</span><span class="p">(</span><span class="ss">:video</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The latter, doesnt create an object in the DB, but fabricates model&rsquo;s attributes which is stored in a hash.</p>

<p>The typical tests that I&rsquo;ve been doing for my &lsquo;GET/POST actions&rsquo; in controllers is to test functionality for &ldquo;valid&rdquo; and &ldquo;invalid&rdquo; data.  Is the instance variable being correnctly? the correct template being rendered, and if there is a redirect upon completion, what that would be?</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>describe "GET new" do
</span><span class='line'>    it "assign new user to @user " do
</span><span class='line'>      get :new
</span><span class='line'>      expect(assigns(:user)).to be_instance_of(User)
</span><span class='line'>    end
</span><span class='line'>    it "should render new template" do
</span><span class='line'>      get :new
</span><span class='line'>      expect(response).to render_template :new
</span><span class='line'>    end
</span><span class='line'>  end</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Collection Routes for Search]]></title>
    <link href="http://cachemoney.github.io/blog/2013/05/12/using-collection-routes-for-search/"/>
    <updated>2013-05-12T14:24:00-05:00</updated>
    <id>http://cachemoney.github.io/blog/2013/05/12/using-collection-routes-for-search</id>
    <content type="html"><![CDATA[<p>In this part, we&rsquo;re covering the differences between a collection route and a member route.  The main difference is that a collection route acts on collection of objects, where as a member route acts on a single object.</p>

<p>To implement search for our videos model, we want to display a collection of video objects.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">resources</span> <span class="ss">:videos</span><span class="p">,</span> <span class="ss">only</span><span class="p">:</span> <span class="o">[</span><span class="ss">:show</span><span class="o">]</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">collection</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">post</span> <span class="ss">:search</span><span class="p">,</span> <span class="ss">to</span><span class="p">:</span> <span class="s2">&quot;videos#search&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Shoulda Matchers, FTW]]></title>
    <link href="http://cachemoney.github.io/blog/2013/05/11/shoulda-matchers/"/>
    <updated>2013-05-11T13:59:00-05:00</updated>
    <id>http://cachemoney.github.io/blog/2013/05/11/shoulda-matchers</id>
    <content type="html"><![CDATA[<p>The <a href="https://github.com/thoughtbot/shoulda-matchers">Shoulda Matchers gem</a> from Thoughtbot make it very easy to create matchers for ActiveRecord and ActiveModel. In one line of code I am able to test validations and associations with ease.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">describe</span> <span class="no">User</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">it</span> <span class="p">{</span> <span class="n">should</span> <span class="n">validate_uniqueness_of</span><span class="p">(</span><span class="ss">:email</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">it</span> <span class="p">{</span> <span class="n">should</span> <span class="n">have_many</span><span class="p">(</span><span class="ss">:reviews</span><span class="p">)</span><span class="o">.</span><span class="n">order</span><span class="p">(</span><span class="s2">&quot;created_at DESC&quot;</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">it</span> <span class="p">{</span> <span class="n">should</span> <span class="n">validate_presence_of</span><span class="p">(</span><span class="ss">:email</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[3 Styles of Testing]]></title>
    <link href="http://cachemoney.github.io/blog/2013/05/10/styles-of-testing/"/>
    <updated>2013-05-10T13:38:00-05:00</updated>
    <id>http://cachemoney.github.io/blog/2013/05/10/styles-of-testing</id>
    <content type="html"><![CDATA[<p>The three tests that we&rsquo;ll focusing on for the next couple of months is Unit tests, Functional tests, and Integration tests and how we&rsquo;ll using these in our App.</p>

<h3>Unit Tests</h3>

<p>Unit tests are the closest to the implementation code. They cover testing of your models, views, helpers, and routes. They execute faster than the other test, and you are able to get more test coverage from them.</p>

<h3>Functional Tests</h3>

<p>These tests cover the controllers.  Controllers are the glue between views and models.  They can access multiple models and send that data to the views.  They are somewhere in the middle when it comes to execution speed and test coverage.</p>

<h3>Integration Tests</h3>

<p>This would cover real world scenarious.  They tend have more logic as your emulating how a real user interacts with an application. So, we&rsquo;ll be testing important/critical business processes.</p>

<p>The bulk of our testing will be covering all models, controllers, important helpers.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Overcoming the Technical Debt of Testing with TDD]]></title>
    <link href="http://cachemoney.github.io/blog/2013/05/09/overcoming-the-technical-debt-of-testing-with-tdd/"/>
    <updated>2013-05-09T12:54:00-05:00</updated>
    <id>http://cachemoney.github.io/blog/2013/05/09/overcoming-the-technical-debt-of-testing-with-tdd</id>
    <content type="html"><![CDATA[<p>This is an interesting topic as we&rsquo;re covering TDD early in this course.  As your adding more features to your product and doing it quickly, as shipping new features to customers is what every organization strives for, its very easy to neglect testing. Re-testing features can stress out QA, and then for a developer to stop working on the next feature, they would have to write unit tests for the feature that they just released. This technical debt of writing tests after you&rsquo;ve finished coding can burden multiple business groups. <!-- more --></p>

<p>TDD, is the agile way to overcome this technical debt.  Red-Green-Refactor is a method in which you write a failing test, and then writing implementation code to make the test pass. Once all tests are passing, then you work on refactoring your test code and/or implementation code.</p>

<p>TDD provides some of the following benefits:</p>

<ol>
<li>Find out early if your code is going to introduce bugs</li>
<li>Improved code quality

<ol>
<li>more maintainable.</li>
<li>Focusing on specific features &ndash; less likely to going sideways</li>
<li>Modules are less likely coupled with other parts of the code</li>
</ol>
</li>
<li>it documents the functionality of the code.  Anybody reading the test code, can easily figure out what and how the code works.</li>
<li>promotes group ownership – the team collectively owns the code and verify it as part of a build.</li>
</ol>


<p>I still learning more and more about TDD, and a question I&rsquo;ve been asking myself, &ldquo;how long should I spend on TDD&rdquo;.  I don&rsquo;t know the answer to this, and the best answers I could find points to: &ldquo;It depends.&rdquo;  I have been reading <a href="https://leanpub.com/everydayrailsrspec">Everyday Testing with Rails</a> and this <a href="http://mikehadlow.blogspot.com/2011/06/i-dont-have-time-for-unit-tests.html">post</a> by Mike Hadlow helped answer some other questions.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Importance of Testing]]></title>
    <link href="http://cachemoney.github.io/blog/2013/05/05/the-importance-of-testing/"/>
    <updated>2013-05-05T11:13:00-05:00</updated>
    <id>http://cachemoney.github.io/blog/2013/05/05/the-importance-of-testing</id>
    <content type="html"><![CDATA[<h3>Why have automated testing?</h3>

<ol>
<li>Not having tests</li>
<li>Having a QA Team</li>
<li>Effect on Development</li>
</ol>


<p> <!-- more --></p>

<p>Not having any tests, means your customers are doing your testing for you. I am all too familiar with this process. I worked at this one e-tailer that constantly pushed untested code into production. It was a customer service nightmare.  Who knows how much money is lost by those who just bounce the second they encounter a bug.  It would make any CEO cringe to.</p>

<p>Having a dedicated QA team can be helpful for pushing bug free code into production, but this is typically done in mature companies with an established product.  In a startup, where running in a lean
environment, and your bootstrapped, QA roles are unfortunately rolled into the dev team.</p>

<p>It can be a challenge when developers are required to write their own tests.  As a result, code quality can become an issue, as developers can be throwing tests in the last minute so that they can check-off testing. Often times, a developer can own a certain feature in a project, where they become the expert on that subject matter, creating a knowledge gap with other team members.  This can introduce new problems such as: &ldquo;How do we know if this feature works?&rdquo; or &ldquo;Did anything else break?&rdquo;</p>

<h4>How do we fix this?</h4>

<p>Through regression testing</p>

<p><img class="center" src="https://s3-us-west-2.amazonaws.com/blog-assets-cache/images/test-in-production.jpg" title="most interesting man" alt="images"></p>
]]></content>
  </entry>
  
</feed>
