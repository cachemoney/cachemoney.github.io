<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Production | Ruby on Rails, Online Marketing and Analytics]]></title>
  <link href="http://cachemoney.github.io/blog/categories/production/atom.xml" rel="self"/>
  <link href="http://cachemoney.github.io/"/>
  <updated>2014-02-22T18:39:23-06:00</updated>
  <id>http://cachemoney.github.io/</id>
  <author>
    <name><![CDATA[Robin Paul]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Using Unicorn on Heroku to Improve Concurrency]]></title>
    <link href="http://cachemoney.github.io/blog/2013/06/15/using-unicorn-on-heroku-to-improve-concurrency/"/>
    <updated>2013-06-15T23:53:00-05:00</updated>
    <id>http://cachemoney.github.io/blog/2013/06/15/using-unicorn-on-heroku-to-improve-concurrency</id>
    <content type="html"><![CDATA[<p>The default configuration in Heroku uses Webrick(?) as the default webserver.  They recommend that you use Unicorn, which is a Rack HTTP server that can run multiple ruby processes in a single dyno.</p>

<p>You can control how many of these ruby processes that unicorn will use with <code>worker_processes Integer(ENV["WEB_CONCURRENCY"] || 3)</code> in your Procfile.</p>

<p>Now that I have redis being used to process workers, I could use Foreman to start all my services to mimic a production environment.  <code>foreman start</code> will read a Procfile in the Rails root directory and start up (web)workers on port 5000.</p>

<p>References:
1. <a href="https://devcenter.heroku.com/articles/rails-unicorn">https://devcenter.heroku.com/articles/rails-unicorn</a>
2. <a href="https://github.com/blog/517-unicorn">https://github.com/blog/517-unicorn</a></p>
]]></content>
  </entry>
  
</feed>
