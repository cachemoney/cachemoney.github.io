<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Testing | Ruby on Rails, Online Marketing and Analytics]]></title>
  <link href="http://cachemoney.github.io/blog/categories/testing/atom.xml" rel="self"/>
  <link href="http://cachemoney.github.io/"/>
  <updated>2013-06-24T20:49:24-05:00</updated>
  <id>http://cachemoney.github.io/</id>
  <author>
    <name><![CDATA[Robin Paul]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Writing Feature Specs with Capybara]]></title>
    <link href="http://cachemoney.github.io/blog/2013/05/27/writing-feature-specs-with-capybara/"/>
    <updated>2013-05-27T20:30:00-05:00</updated>
    <id>http://cachemoney.github.io/blog/2013/05/27/writing-feature-specs-with-capybara</id>
    <content type="html"><![CDATA[<h3>Testing an app, like how a real user would use it.</h3>

<p>It&rsquo;s interesting that even though the terminology changes slightly, Feature and Scenario, its analagous to &ldquo;Describe&rdquo; and &ldquo;It&rdquo; in our rspec unit tests.  Capybara also introduces an easy to understand syntax like &ldquo;click_link, fill_in and visit to issue real life user actions.</p>

<!-- more -->


<p>After installing the capybara gem and adding <code>require 'capybara/rspec'</code> to spec_helper.rb</p>

<p>```ruby
feature &lsquo;user signs in&rsquo; do
  background do</p>

<pre><code>User.create(full_name: "Jon Doe", email: "jon@example.com", password: "password")
</code></pre>

<p>  end
  scenario &lsquo;with existing username&rsquo; do</p>

<pre><code>visit sign_in_path
fill_in "email", with: "jon@example.com"
fill_in "password", with: "password"
click_button  "Sign in"
page.should have_content "Welcome, Jon Doe"
</code></pre>

<p>  end</p>

<p>  scenario &lsquo;with non-existant username&rsquo; do</p>

<pre><code>visit sign_in_path
fill_in "email", with: "jon_jones@example.com"
fill_in "password", with: "password"
click_button  "Sign in"
page.should have_content "Invalid Email or Password"
</code></pre>

<p>  end</p>

<p>end
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Shared Examples equals Shared Bliss]]></title>
    <link href="http://cachemoney.github.io/blog/2013/05/24/shared-examples-equals-shared-bliss/"/>
    <updated>2013-05-24T20:16:00-05:00</updated>
    <id>http://cachemoney.github.io/blog/2013/05/24/shared-examples-equals-shared-bliss</id>
    <content type="html"><![CDATA[<p>Another examle of DRY'ing up our controller specs is using shared_examples.</p>

<p>```ruby
shared_examples &ldquo;require_sign_in&rdquo; do
  it &ldquo;redirects to the sign_in_path&rdquo; do</p>

<pre><code>clear_current_user
action
expect(response).to redirect_to sign_in_path
</code></pre>

<p>  end
end
<code>
It is basically another way to wrap test code and allows you to call it via:
</code>ruby
describe &ldquo;Invite Friends&rdquo; do
  it_behaves_like &ldquo;require_sign_in&rdquo;
end
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Macros in Rspec]]></title>
    <link href="http://cachemoney.github.io/blog/2013/05/20/using-macros-in-rspec/"/>
    <updated>2013-05-20T20:06:00-05:00</updated>
    <id>http://cachemoney.github.io/blog/2013/05/20/using-macros-in-rspec</id>
    <content type="html"><![CDATA[<p>A much welcomed lesson in writing macros to simplify all our testing was much appreciative.  A lot of our feature tests include authenticating users.  These macros can be used across all controller tests, whenver a require_user is a business requirement.</p>

<p>```ruby
def set_current_user(user=nil)
  session[:user_id] = (user || Fabricate(:user).id)
end</p>

<p>def set_current_admin(admin=nil)
  session[:user_id] = (admin || Fabricate(:admin).id)
end</p>

<p>def current_user
  User.find(session[:user_id])
end</p>

<p>def clear_current_user
  session[:user_id] = nil
end</p>

<p>def sign_in(a_user=nil)
  user = a_user || Fabricate(:user)
  visit sign_in_path
  fill_in &ldquo;email&rdquo;, with: user.email
  fill_in &ldquo;password&rdquo;, with: user.password
  click_button  &ldquo;Sign in&rdquo;
end
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Basics in Testing Controllers]]></title>
    <link href="http://cachemoney.github.io/blog/2013/05/17/basics-in-testing-controllers/"/>
    <updated>2013-05-17T18:07:00-05:00</updated>
    <id>http://cachemoney.github.io/blog/2013/05/17/basics-in-testing-controllers</id>
    <content type="html"><![CDATA[<p>One principle that I&rsquo;ve been reading on Rails development, is keeping your controllers &lsquo;skinny&rsquo; and the models &ldquo;fat&rdquo;.  It feels like perhaps, you can be a little &lsquo;lax on testing controllers.  I quickly found out that controllers can be complex as they can access various models, do some processing and then send that info into the view. They are also coupled to your routes, so theres another thing to consider. <!-- more --></p>

<p>Controller specs consist of using an HTTP method (post, get, put &hellip; etc) and some test data to pass into the HTTP verb.  For this project, I&rsquo;ve used the <a href="http://www.fabricationgem.org/">Fabricator</a> gem, which makes creating test objects easy peasy.
<code>ruby
alice = Fabricator(:user)
monk = Fabricator.attributes_for(:video)
</code>
The latter, doesnt create an object in the DB, but fabricates model&rsquo;s attributes which is stored in a hash.</p>

<p>The typical tests that I&rsquo;ve been doing for my &lsquo;GET/POST actions&rsquo; in controllers is to test functionality for &ldquo;valid&rdquo; and &ldquo;invalid&rdquo; data.  Is the instance variable being correnctly? the correct template being rendered, and if there is a redirect upon completion, what that would be?</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>describe &ldquo;GET new&rdquo; do&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>it "assign new user to @user " do
</span><span class='line'>  get :new
</span><span class='line'>  expect(assigns(:user)).to be_instance_of(User)
</span><span class='line'>end
</span><span class='line'>it "should render new template" do
</span><span class='line'>  get :new
</span><span class='line'>  expect(response).to render_template :new
</span><span class='line'>end
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>  end</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Shoulda Matchers, FTW]]></title>
    <link href="http://cachemoney.github.io/blog/2013/05/11/shoulda-matchers/"/>
    <updated>2013-05-11T13:59:00-05:00</updated>
    <id>http://cachemoney.github.io/blog/2013/05/11/shoulda-matchers</id>
    <content type="html"><![CDATA[<p>The <a href="https://github.com/thoughtbot/shoulda-matchers">Shoulda Matchers gem</a> from Thoughtbot make it very easy to create matchers for ActiveRecord and ActiveModel. In one line of code I am able to test validations and associations with ease.</p>

<p><code>ruby
describe User do
  it { should validate_uniqueness_of(:email) }
  it { should have_many(:reviews).order("created_at DESC") }
  it { should validate_presence_of(:email) }
end
</code></p>
]]></content>
  </entry>
  
</feed>
