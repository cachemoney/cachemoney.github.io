<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Testing | Ruby on Rails, Online Marketing and Analytics]]></title>
  <link href="http://cachemoney.github.io/blog/categories/testing/atom.xml" rel="self"/>
  <link href="http://cachemoney.github.io/"/>
  <updated>2013-06-26T10:57:38-05:00</updated>
  <id>http://cachemoney.github.io/</id>
  <author>
    <name><![CDATA[Robin Paul]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ActionMailer in Rails: Communicating with Users]]></title>
    <link href="http://cachemoney.github.io/blog/2013/06/01/actionmailer-in-rail-communicating-with-users/"/>
    <updated>2013-06-01T23:49:00-05:00</updated>
    <id>http://cachemoney.github.io/blog/2013/06/01/actionmailer-in-rail-communicating-with-users</id>
    <content type="html"><![CDATA[<p>After doing email marketing for several years, and building a building out a strategy for revenue from scratch, learning ActionMailer was really exciting.</p>

<!-- more -->


<p>I was very surprised on how easy it is to implement and testing is just as easy with</p>

<p>You setup your Mailer routines in app\mailers
```ruby
class AppMailer &lt; ActionMailer::Base
  def welcome_email(user)</p>

<pre><code>@user = user
@url = 'http://localhost:3000/sign_in'
email_with_name = "#{@user.full_name} &lt;#{@user.email}&gt;"
mail(to: @user.email, from: 'info@myflix.com' , subject: "Welcome to My Awesome Site")
</code></pre>

<p>  end</p>

<p>  def password_reset(user)</p>

<pre><code>@user = user
mail :to =&gt; @user.email, :subject =&gt; "Password Reset", from: "info@myflix.com"
</code></pre>

<p>  end
end
<code>
Create your message in your views template
</code>ruby views / app_mailer / welcome_email.html.erb
&lt;!DOCTYPE html>
<html>
  <head></p>

<pre><code>&lt;meta content="text/html; charset=UTF-8" http-equiv="Content-Type" /&gt;
</code></pre>

<p>  </head>
  <body></p>

<pre><code>&lt;h1&gt;Welcome to example.com, &lt;%= @user.full_name %&gt;&lt;/h1&gt;
&lt;p&gt;
  You have successfully signed up to example.com,
  your username is: &lt;%= @user.email %&gt;.&lt;br/&gt;
&lt;/p&gt;
&lt;p&gt;
  To login to the site, just follow this link: &lt;%= @url %&gt;.
&lt;/p&gt;
&lt;p&gt;Thanks for joining and have a great day!&lt;/p&gt;
</code></pre>

<p>  </body>
</html>
<code>
Testing is pretty straight forward, the only thing is to do is clear ActionMailer deliveries queue after each test.
</code>ruby
describe &ldquo;POST create&rdquo; do
  context &ldquo;email sending&rdquo; do</p>

<pre><code>  let!(:alice)  {Fabricate.attributes_for(:user)}
  before {post :create, user: alice}
  after { ActionMailer::Base.deliveries.clear }      

  it "sends out the email" do
    ActionMailer::Base.deliveries.should_not be_empty
  end
  it "sends to the right receipient" do
    message = ActionMailer::Base.deliveries.last
    message.to.should == [alice["email"]]
  end
  it "has the right content" do
    message = ActionMailer::Base.deliveries.last
    message.body.should include('You have successfully signed up to example.com')
  end
end
</code></pre>

<p>end  <br/>
<code>``
In development, I set up a spare gmail account to send out email notifications and on production, I am using Mailgun, where you can send 200/emails/day for free.  To keep my api keys private, I followed the example outlined by Daniel on using a [local_congig.yml](http://railsapps.github.io/rails-environment-variables.html). Just remember to add it to your</code>.gitignore` file so it&rsquo;s not checked into your repo.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[3 Styles of BDD with Rails]]></title>
    <link href="http://cachemoney.github.io/blog/2013/05/29/3-styles-of-bdd-with-rails/"/>
    <updated>2013-05-29T23:43:00-05:00</updated>
    <id>http://cachemoney.github.io/blog/2013/05/29/3-styles-of-bdd-with-rails</id>
    <content type="html"><![CDATA[<p>So far, we&rsquo;ve been writing feature tests with capybara to test a particular business process which touches multiple controllers, models and views.  There are certain styles of approaching Behavioral Driven Design, a) Outside &ndash; In (ABDD), b) Inside &ndash; Out, and c) Meet in the Middle.</p>

<!-- more -->


<p>The approach that we&rsquo;re following is Meet in the middle.  With this flavor, we start with html mockups and then we start replacing placeholder data with logic.  Controller tests will then verify our view/controller interactions, followed by model tests and then finally the feature/integration specs will test out the workflow.</p>

<p>Its interesting to hear about the Outside-In approach, or Acceptance BDD, as your start with the integration tests, then controller tests, followed by model tests.  When I started reading about Rails development over a year ago and doing numerous tutorials on the web, I would always run across blog posts about Cucumber testing, and it seemed everyone out there had an opinion on it. &ldquo;Is Cucumber and BDD the Holy Grail&rdquo; or &ldquo;Who wants to write a parser to parse your Cucumber specs?&rdquo;  This seems to be one of the biggest hurdles with this approach to BDD. Theres a big learning curve in this as you have to write an integration test right off the bat.</p>

<p>The last approach to BDD, Inside-Out, seems to be the easiest to implement as your start writing model tests right away.  But the one thing you have to watch out, is that when you start moving on to your controller tests, you could have easily made some wrong assumptions about how a model behaves and then have to revisit the code afterwards.  This can cascade up as you approach your feature tests and then coming back to re-working your models.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Writing Feature Specs with Capybara]]></title>
    <link href="http://cachemoney.github.io/blog/2013/05/27/writing-feature-specs-with-capybara/"/>
    <updated>2013-05-27T20:30:00-05:00</updated>
    <id>http://cachemoney.github.io/blog/2013/05/27/writing-feature-specs-with-capybara</id>
    <content type="html"><![CDATA[<h3>Testing an app, like how a real user would use it.</h3>

<p>It&rsquo;s interesting that even though the terminology changes slightly, Feature and Scenario, its analagous to &ldquo;Describe&rdquo; and &ldquo;It&rdquo; in our rspec unit tests.  Capybara also introduces an easy to understand syntax like &ldquo;click_link, fill_in and visit&rdquo; to issue real life user actions.</p>

<!-- more -->


<p>After installing the capybara gem and adding <code>require 'capybara/rspec'</code> to spec_helper.rb</p>

<p>```ruby
feature &lsquo;user signs in&rsquo; do
  background do</p>

<pre><code>User.create(full_name: "Jon Doe", email: "jon@example.com", password: "password")
</code></pre>

<p>  end
  scenario &lsquo;with existing username&rsquo; do</p>

<pre><code>visit sign_in_path
fill_in "email", with: "jon@example.com"
fill_in "password", with: "password"
click_button  "Sign in"
page.should have_content "Welcome, Jon Doe"
</code></pre>

<p>  end</p>

<p>  scenario &lsquo;with non-existant username&rsquo; do</p>

<pre><code>visit sign_in_path
fill_in "email", with: "jon_jones@example.com"
fill_in "password", with: "password"
click_button  "Sign in"
page.should have_content "Invalid Email or Password"
</code></pre>

<p>  end</p>

<p>end
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Shared Examples equals Shared Bliss]]></title>
    <link href="http://cachemoney.github.io/blog/2013/05/24/shared-examples-equals-shared-bliss/"/>
    <updated>2013-05-24T20:16:00-05:00</updated>
    <id>http://cachemoney.github.io/blog/2013/05/24/shared-examples-equals-shared-bliss</id>
    <content type="html"><![CDATA[<p>Another examle of DRY'ing up our controller specs is using shared_examples.</p>

<p>```ruby
shared_examples &ldquo;require_sign_in&rdquo; do
  it &ldquo;redirects to the sign_in_path&rdquo; do</p>

<pre><code>clear_current_user
action
expect(response).to redirect_to sign_in_path
</code></pre>

<p>  end
end
<code>
It is basically another way to wrap test code and allows you to call it via:
</code>ruby
describe &ldquo;Invite Friends&rdquo; do
  it_behaves_like &ldquo;require_sign_in&rdquo;
end
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Macros in Rspec]]></title>
    <link href="http://cachemoney.github.io/blog/2013/05/20/using-macros-in-rspec/"/>
    <updated>2013-05-20T20:06:00-05:00</updated>
    <id>http://cachemoney.github.io/blog/2013/05/20/using-macros-in-rspec</id>
    <content type="html"><![CDATA[<p>A much welcomed lesson in writing macros to simplify all our testing was much appreciative.  A lot of our feature tests include authenticating users.  These macros can be used across all controller tests, whenver a require_user is a business requirement.</p>

<p>```ruby
def set_current_user(user=nil)
  session[:user_id] = (user || Fabricate(:user).id)
end</p>

<p>def set_current_admin(admin=nil)
  session[:user_id] = (admin || Fabricate(:admin).id)
end</p>

<p>def current_user
  User.find(session[:user_id])
end</p>

<p>def clear_current_user
  session[:user_id] = nil
end</p>

<p>def sign_in(a_user=nil)
  user = a_user || Fabricate(:user)
  visit sign_in_path
  fill_in &ldquo;email&rdquo;, with: user.email
  fill_in &ldquo;password&rdquo;, with: user.password
  click_button  &ldquo;Sign in&rdquo;
end
```</p>
]]></content>
  </entry>
  
</feed>
